x2 = sin(theta2) * cos(phi2) + rnorm(n, 0, sd)
y2 =  sin(theta2) * sin(phi2) + rnorm(n, 0, sd)
z2 =  cos(theta2) + rnorm(n, 0, sd)
theta3 = runif(n, pi/4, pi*3/4)
phi3 = runif(n, pi/4, pi*3/4)
x3 = sin(theta3) * cos(phi3) + rnorm(n, 0, sd)
y3 =  sin(theta3) * sin(phi3) + rnorm(n, 0, sd)
z3 =  cos(theta3) + rnorm(n, 0, sd)
dat <- rbind(cbind(x1, y1, z1), cbind(x2, y2, z2), cbind(x3, y3, z3))
dat <- cbind(dat, col = rep(1:3, each = n))
colnames(dat)[1:3] <- c("x", "y", "z")
#install.packages("plot3D")
library(plot3D)
scatter3D(-dat[,1], dat[,2], dat[,3], colvar = dat[, 4],
col = ramp.col(c("red", "blue", "green")), theta = 45, phi = 10)
N <- n * 3
m <- cbind(dat[sample(1:N, 25), 1:3],
rep(1:5, each = 5), rep(1:5, 5))
colnames(m) <- c("x", "y", "z", "i", "j")
dist <- matrix(0, 25, 25)
for(i in 1:25){
for(j in 1:25){
dist[i, j] <- sum((m[i, c(4,5)] - m[j, c(4,5)])^2)^.5 / 2
}
}
Nitr = 40
index = 1
for(itr in 1:Nitr){
for(i in 1:N){
r <- 1 * (Nitr*N - index) / (Nitr*N-1) + 1
alpha <- 1 * (Nitr*N - index) / (Nitr*N-1) + 0
closest <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
neig <- which(dist[closest, ] < r)
m[neig, 1:3] <- t(t(m[neig, 1:3]) + alpha * (dat[i, 1:3] - t(m[neig, 1:3])))
index <- index + 1
}
cat(".")
}
assign <- rep(NA, N)
for(i in 1:N){
assign[i] <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
}
out <- m[assign, c(4, 5)] + rnorm(N*2, 0, 0.1)
plot(out, col = c("red", "blue", "green")[dat[, 4]])
n = 30
sd = 0.6
theta1 = runif(n, -pi/8, pi/8)
phi1 = runif(n, 0, 2*pi)
x1 = sin(theta1) * cos(phi1) + rnorm(n, 0, sd)
y1 =  sin(theta1) * sin(phi1) + rnorm(n, 0, sd)
z1 =  cos(theta1) + rnorm(n, 0, sd)
theta2 = runif(n, pi/4, pi*3/4)
phi2 = runif(n, -pi/4, pi/4)
x2 = sin(theta2) * cos(phi2) + rnorm(n, 0, sd)
y2 =  sin(theta2) * sin(phi2) + rnorm(n, 0, sd)
z2 =  cos(theta2) + rnorm(n, 0, sd)
theta3 = runif(n, pi/4, pi*3/4)
phi3 = runif(n, pi/4, pi*3/4)
x3 = sin(theta3) * cos(phi3) + rnorm(n, 0, sd)
y3 =  sin(theta3) * sin(phi3) + rnorm(n, 0, sd)
z3 =  cos(theta3) + rnorm(n, 0, sd)
dat <- rbind(cbind(x1, y1, z1), cbind(x2, y2, z2), cbind(x3, y3, z3))
dat <- cbind(dat, col = rep(1:3, each = n))
colnames(dat)[1:3] <- c("x", "y", "z")
#install.packages("plot3D")
library(plot3D)
scatter3D(-dat[,1], dat[,2], dat[,3], colvar = dat[, 4],
col = ramp.col(c("red", "blue", "green")), theta = 45, phi = 10)
N <- n * 3
m <- cbind(dat[sample(1:N, 25), 1:3],
rep(1:5, each = 5), rep(1:5, 5))
colnames(m) <- c("x", "y", "z", "i", "j")
dist <- matrix(0, 25, 25)
for(i in 1:25){
for(j in 1:25){
dist[i, j] <- sum((m[i, c(4,5)] - m[j, c(4,5)])^2)^.5 / 2
}
}
Nitr = 40
index = 1
for(itr in 1:Nitr){
for(i in 1:N){
r <- 1 * (Nitr*N - index) / (Nitr*N-1) + 1
alpha <- 1 * (Nitr*N - index) / (Nitr*N-1) + 0
closest <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
neig <- which(dist[closest, ] < r)
m[neig, 1:3] <- t(t(m[neig, 1:3]) + alpha * (dat[i, 1:3] - t(m[neig, 1:3])))
index <- index + 1
}
cat(".")
}
assign <- rep(NA, N)
for(i in 1:N){
assign[i] <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
}
out <- m[assign, c(4, 5)] + rnorm(N*2, 0, 0.1)
plot(out, col = c("red", "blue", "green")[dat[, 4]])
n = 30
sd = 0.2
theta1 = runif(n, -pi/8, pi/8)
phi1 = runif(n, 0, 2*pi)
x1 = sin(theta1) * cos(phi1) + rnorm(n, 0, sd)
y1 =  sin(theta1) * sin(phi1) + rnorm(n, 0, sd)
z1 =  cos(theta1) + rnorm(n, 0, sd)
theta2 = runif(n, pi/4, pi*3/4)
phi2 = runif(n, -pi/4, pi/4)
x2 = sin(theta2) * cos(phi2) + rnorm(n, 0, sd)
y2 =  sin(theta2) * sin(phi2) + rnorm(n, 0, sd)
z2 =  cos(theta2) + rnorm(n, 0, sd)
theta3 = runif(n, pi/4, pi*3/4)
phi3 = runif(n, pi/4, pi*3/4)
x3 = sin(theta3) * cos(phi3) + rnorm(n, 0, sd)
y3 =  sin(theta3) * sin(phi3) + rnorm(n, 0, sd)
z3 =  cos(theta3) + rnorm(n, 0, sd)
dat <- rbind(cbind(x1, y1, z1), cbind(x2, y2, z2), cbind(x3, y3, z3))
dat <- cbind(dat, col = rep(1:3, each = n))
colnames(dat)[1:3] <- c("x", "y", "z")
#install.packages("plot3D")
library(plot3D)
scatter3D(-dat[,1], dat[,2], dat[,3], colvar = dat[, 4],
col = ramp.col(c("red", "blue", "green")), theta = 45, phi = 10)
N <- n * 3
m <- cbind(dat[sample(1:N, 25), 1:3],
rep(1:5, each = 5), rep(1:5, 5))
colnames(m) <- c("x", "y", "z", "i", "j")
dist <- matrix(0, 25, 25)
for(i in 1:25){
for(j in 1:25){
dist[i, j] <- sum((m[i, c(4,5)] - m[j, c(4,5)])^2)^.5 / 2
}
}
Nitr = 40
index = 1
for(itr in 1:Nitr){
for(i in 1:N){
r <- 1 * (Nitr*N - index) / (Nitr*N-1) + 1
alpha <- 1 * (Nitr*N - index) / (Nitr*N-1) + 0
closest <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
neig <- which(dist[closest, ] < r)
m[neig, 1:3] <- t(t(m[neig, 1:3]) + alpha * (dat[i, 1:3] - t(m[neig, 1:3])))
index <- index + 1
}
cat(".")
}
assign <- rep(NA, N)
for(i in 1:N){
assign[i] <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
}
out <- m[assign, c(4, 5)] + rnorm(N*2, 0, 0.1)
plot(out, col = c("red", "blue", "green")[dat[, 4]])
r
alpha
n = 30
sd = 0.2
theta1 = runif(n, -pi/8, pi/8)
phi1 = runif(n, 0, 2*pi)
x1 = sin(theta1) * cos(phi1) + rnorm(n, 0, sd)
y1 =  sin(theta1) * sin(phi1) + rnorm(n, 0, sd)
z1 =  cos(theta1) + rnorm(n, 0, sd)
theta2 = runif(n, pi/4, pi*3/4)
phi2 = runif(n, -pi/4, pi/4)
x2 = sin(theta2) * cos(phi2) + rnorm(n, 0, sd)
y2 =  sin(theta2) * sin(phi2) + rnorm(n, 0, sd)
z2 =  cos(theta2) + rnorm(n, 0, sd)
theta3 = runif(n, pi/4, pi*3/4)
phi3 = runif(n, pi/4, pi*3/4)
x3 = sin(theta3) * cos(phi3) + rnorm(n, 0, sd)
y3 =  sin(theta3) * sin(phi3) + rnorm(n, 0, sd)
z3 =  cos(theta3) + rnorm(n, 0, sd)
dat <- rbind(cbind(x1, y1, z1), cbind(x2, y2, z2), cbind(x3, y3, z3))
dat <- cbind(dat, col = rep(1:3, each = n))
colnames(dat)[1:3] <- c("x", "y", "z")
#install.packages("plot3D")
library(plot3D)
scatter3D(-dat[,1], dat[,2], dat[,3], colvar = dat[, 4],
col = ramp.col(c("red", "blue", "green")), theta = 45, phi = 10)
N <- n * 3
m <- cbind(dat[sample(1:N, 25), 1:3],
rep(1:5, each = 5), rep(1:5, 5))
colnames(m) <- c("x", "y", "z", "i", "j")
dist <- matrix(0, 25, 25)
for(i in 1:25){
for(j in 1:25){
dist[i, j] <- sum((m[i, c(4,5)] - m[j, c(4,5)])^2)^.5 / 2
}
}
Nitr = 40
index = 1
for(itr in 1:Nitr){
for(i in 1:N){
r <- 1 * (Nitr*N - index) / (Nitr*N-1) + 1
alpha <- 1 * (Nitr*N - index) / (Nitr*N) + 0
closest <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
neig <- which(dist[closest, ] < r)
m[neig, 1:3] <- t(t(m[neig, 1:3]) + alpha * (dat[i, 1:3] - t(m[neig, 1:3])))
index <- index + 1
}
cat(".")
}
assign <- rep(NA, N)
for(i in 1:N){
assign[i] <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
}
out <- m[assign, c(4, 5)] + rnorm(N*2, 0, 0.1)
plot(out, col = c("red", "blue", "green")[dat[, 4]])
n = 30
sd = 0.6
theta1 = runif(n, -pi/8, pi/8)
phi1 = runif(n, 0, 2*pi)
x1 = sin(theta1) * cos(phi1) + rnorm(n, 0, sd)
y1 =  sin(theta1) * sin(phi1) + rnorm(n, 0, sd)
z1 =  cos(theta1) + rnorm(n, 0, sd)
theta2 = runif(n, pi/4, pi*3/4)
phi2 = runif(n, -pi/4, pi/4)
x2 = sin(theta2) * cos(phi2) + rnorm(n, 0, sd)
y2 =  sin(theta2) * sin(phi2) + rnorm(n, 0, sd)
z2 =  cos(theta2) + rnorm(n, 0, sd)
theta3 = runif(n, pi/4, pi*3/4)
phi3 = runif(n, pi/4, pi*3/4)
x3 = sin(theta3) * cos(phi3) + rnorm(n, 0, sd)
y3 =  sin(theta3) * sin(phi3) + rnorm(n, 0, sd)
z3 =  cos(theta3) + rnorm(n, 0, sd)
dat <- rbind(cbind(x1, y1, z1), cbind(x2, y2, z2), cbind(x3, y3, z3))
dat <- cbind(dat, col = rep(1:3, each = n))
colnames(dat)[1:3] <- c("x", "y", "z")
#install.packages("plot3D")
library(plot3D)
scatter3D(-dat[,1], dat[,2], dat[,3], colvar = dat[, 4],
col = ramp.col(c("red", "blue", "green")), theta = 45, phi = 10)
N <- n * 3
m <- cbind(dat[sample(1:N, 25), 1:3],
rep(1:5, each = 5), rep(1:5, 5))
colnames(m) <- c("x", "y", "z", "i", "j")
dist <- matrix(0, 25, 25)
for(i in 1:25){
for(j in 1:25){
dist[i, j] <- sum((m[i, c(4,5)] - m[j, c(4,5)])^2)^.5 / 2
}
}
Nitr = 40
index = 1
for(itr in 1:Nitr){
for(i in 1:N){
r <- 1 * (Nitr*N - index) / (Nitr*N-1) + 1
alpha <- 1 * (Nitr*N - index) / (Nitr*N) + 0
closest <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
neig <- which(dist[closest, ] < r)
m[neig, 1:3] <- t(t(m[neig, 1:3]) + alpha * (dat[i, 1:3] - t(m[neig, 1:3])))
index <- index + 1
}
cat(".")
}
assign <- rep(NA, N)
for(i in 1:N){
assign[i] <- which.min(apply(m[, 1:3], 1, function(x,y){
sum((x - y)^2)
}, dat[i, 1:3]))
}
out <- m[assign, c(4, 5)] + rnorm(N*2, 0, 0.1)
plot(out, col = c("red", "blue", "green")[dat[, 4]])
library(chorddiag)
## example taken from the github site
m <- matrix(c(11975,  5871, 8916, 2868,
1951, 10048, 2060, 6171,
8010, 16145, 8090, 8045,
1013,   990,  940, 6907),
byrow = TRUE,
nrow = 4, ncol = 4)
haircolors <- c("black", "blonde", "brown", "red")
dimnames(m) <- list(have = haircolors,
prefer = haircolors)
m
#             prefer
#   have     black blonde brown  red
#     black  11975   5871  8916 2868
#     blonde  1951  10048  2060 6171
#     brown   8010  16145  8090 8045
#     red     1013    990   940 6907
groupColors <- c("#000000", "#FFDD89", "#957244", "#F26223")
chorddiag(m, groupColors = groupColors, groupnamePadding = 40)
setwd("/Users/zehangli/Bitbucket-repos/LatentGaussian/Rcodes")
load("rdaVA/201801/+K20mat-A.rda")
corrs <- out[[1]]
invcorrs <- out[[2]]
structs <- out[[3]]
load("../data/alpha/sympsK3.rda")
data(probbase3)
symps[symps == "skin_les"] <- "sk_les"
sympstext <- probbase3[match(symps, probbase3[, 2]), 3]
structures <- matrix(1, length(symps), length(symps))
for(i in 1:dim(probbase3)[1]){
for(j in 4:12){
if(probbase3[i, 2] %in% symps && probbase3[i, j] %in% symps){
structures[match(probbase3[i, 2], symps), match(probbase3[i, j], symps)] <- 0
structures[match(probbase3[i, j], symps), match(probbase3[i, 2], symps)] <- 0
}
}
}
for(i in 1:length(symps)){
for(j in 1:length(symps)){
if(structures[i, j] == 0){
nei <- which(structures[, j] == 0)
structures[i, nei] <- structures[nei, i] <- 0
}
}
}
colnames(structures) <- rownames(structures) <- symps
invcorrs.sp <- NULL
plot.out <- NULL
exist <- NULL
for(i in 1:length(corrs)){
invcorrs.sp[[i]] <- invcorrs[[i]] * (structs[[i]] > 1499/2)
rownames(invcorrs.sp[[i]]) <- colnames(invcorrs.sp[[i]]) <- symps
if(is.null(exist)){
exist <- rep(0, dim(invcorrs[[i]])[1])
}
tmp <- invcorrs.sp[[i]]
diag(tmp) <- 0
exist <- exist + as.numeric(apply(tmp, 2, function(x){
sum(abs(x)>0,na.rm=T)>0
}))
}
adj0<- matrix(0, dim(invcorrs[[1]])[1], dim(invcorrs[[1]])[1])
mean <- matrix(0, dim(invcorrs[[1]])[1], dim(invcorrs[[1]])[1])
for(i in 1:5){
tmp <- abs(invcorrs.sp[[i]])
tmp[tmp != 0] <- 1
adj0 <- adj0 + tmp
mean <- mean + cov2cor(invcorrs.sp[[i]]) / 5
}
adj <- adj0
rownames(mean) <- colnames(mean) <- symps
adj[adj < 3] <- 0
adj <- adj * structures
graph=graph.adjacency(adj, mode="undirected",diag=FALSE)
edgelist = get.edgelist(graph)
values <- rep(0, dim(edgelist)[1])
for(i in 1:length(values)) values[i] <- mean[edgelist[i, 1], edgelist[i, 2]]
library(openVA)
library(igraph)
library(arcdiagram)
metrics <- NULL
training <- NULL
train <- 0.2
reps <- 1:(1/train)
corrs <- NULL
invcorrs <- NULL
structs <- NULL
# for(rep in reps){
# 	filename <- paste0("rdaVA/201801/+K", train*100, "-", rep, "-A.rda")
# 	if(!file.exists(filename)) next
# 	load(filename)
# 	corrs[[rep]] <- out$corr.mean
# 	invcorrs[[rep]] <- out$prec.mean
# 	inclusion <-  read.csv(paste0("../experiments/+K20-", rep, "-A/+K20-", rep, "-A_inclusion_out.txt"), header=F)
# 	structs[[rep]] <- inclusion
# }
# out <- list(corrs, invcorrs, structs)
# save(out, file = "rdaVA/201801/+K20mat-A.rda")
load("rdaVA/201801/+K20mat-A.rda")
corrs <- out[[1]]
invcorrs <- out[[2]]
structs <- out[[3]]
load("../data/alpha/sympsK3.rda")
data(probbase3)
symps[symps == "skin_les"] <- "sk_les"
sympstext <- probbase3[match(symps, probbase3[, 2]), 3]
structures <- matrix(1, length(symps), length(symps))
for(i in 1:dim(probbase3)[1]){
for(j in 4:12){
if(probbase3[i, 2] %in% symps && probbase3[i, j] %in% symps){
structures[match(probbase3[i, 2], symps), match(probbase3[i, j], symps)] <- 0
structures[match(probbase3[i, j], symps), match(probbase3[i, 2], symps)] <- 0
}
}
}
for(i in 1:length(symps)){
for(j in 1:length(symps)){
if(structures[i, j] == 0){
nei <- which(structures[, j] == 0)
structures[i, nei] <- structures[nei, i] <- 0
}
}
}
colnames(structures) <- rownames(structures) <- symps
invcorrs.sp <- NULL
plot.out <- NULL
exist <- NULL
for(i in 1:length(corrs)){
invcorrs.sp[[i]] <- invcorrs[[i]] * (structs[[i]] > 1499/2)
rownames(invcorrs.sp[[i]]) <- colnames(invcorrs.sp[[i]]) <- symps
if(is.null(exist)){
exist <- rep(0, dim(invcorrs[[i]])[1])
}
tmp <- invcorrs.sp[[i]]
diag(tmp) <- 0
exist <- exist + as.numeric(apply(tmp, 2, function(x){
sum(abs(x)>0,na.rm=T)>0
}))
}
adj0<- matrix(0, dim(invcorrs[[1]])[1], dim(invcorrs[[1]])[1])
mean <- matrix(0, dim(invcorrs[[1]])[1], dim(invcorrs[[1]])[1])
for(i in 1:5){
tmp <- abs(invcorrs.sp[[i]])
tmp[tmp != 0] <- 1
adj0 <- adj0 + tmp
mean <- mean + cov2cor(invcorrs.sp[[i]]) / 5
}
adj <- adj0
rownames(mean) <- colnames(mean) <- symps
adj[adj < 3] <- 0
adj <- adj * structures
graph=graph.adjacency(adj, mode="undirected",diag=FALSE)
edgelist = get.edgelist(graph)
values <- rep(0, dim(edgelist)[1])
for(i in 1:length(values)) values[i] <- mean[edgelist[i, 1], edgelist[i, 2]]
m
?chorddiag
dim(graph)
adj[1:5, 1:5]
adj[1:50, 1:5]
sum(adj)
adj2 <- adj[apply(adj, 2, sum) > 0, apply(adj, 2, sum) > 0]
dim(adj2)
chorddiag(adj2)
adj2 <- adj
adj2[adj2 != 0] <- 1
adj2 <- adj2 * mean
adj2 <- adj2[apply(adj, 2, sum) > 0, apply(adj, 2, sum) > 0]
chorddiag(adj2)
chorddiag(abs(adj2))
chorddiag(abs(adj2), showTicks=FALSE)
diag(adj2) <- NA
chorddiag(abs(adj2), showTicks=FALSE)
symps
sympstext
colnames(adj2) <- sympstext[match(colnames(adj2), symps)]
rownames(adj2) <- sympstext[match(rownames(adj2), symps)]
chorddiag(abs(adj2), showTicks=FALSE)
# colnames(adj2) <- sympstext[match(colnames(adj2), symps)]
# rownames(adj2) <- sympstext[match(rownames(adj2), symps)]
chorddiag(abs(adj2), showTicks=FALSE)
adj2 <- adj
adj2[adj2 != 0] <- 1
adj2 <- adj2 * mean
adj2 <- adj2[apply(adj, 2, sum) > 0, apply(adj, 2, sum) > 0]
diag(adj2) <- NA
# colnames(adj2) <- sympstext[match(colnames(adj2), symps)]
# rownames(adj2) <- sympstext[match(rownames(adj2), symps)]
chorddiag(abs(adj2), showTicks=FALSE)
colnames(adj2)
data("probbase3")
View(probbase3)
# colnames(adj2) <- sympstext[match(colnames(adj2), symps)]
# rownames(adj2) <- sympstext[match(rownames(adj2), symps)]
data(probbase3)
group <- probbase3[match(colnames(adj2), probbase3[, 2]), 1]
group
group <- trunc(as.numeric(group)/100)
group
adj3 <- adj0
rownames(mean) <- colnames(mean) <- symps
adj3[adj3 < 3] <- 0
adj3[adj3 != 0] <- 1
adj3 <- adj3 * mean
adj3 <- adj3[apply(adj3, 2, sum) > 0, apply(adj3, 2, sum) > 0]
diag(adj3) <- NA
group <- probbase3[match(colnames(adj3), probbase3[, 2]), 1]
group <- trunc(as.numeric(group)/100)
chorddiag(abs(adj2), showTicks=FALSE)
chorddiag(abs(adj3), showTicks=FALSE)
chorddiag(abs(adj3), showTicks=FALSE, width=100, height=100)
chorddiag(abs(adj3), showTicks=FALSE, width=1000, height=1000)
chorddiag(abs(adj3), showTicks=FALSE, width=1000, height=1000, margin=10)
chorddiag(abs(adj3), showTicks=FALSE,margin=10)
chorddiag(abs(adj3), showTicks=FALSE,margin=100)
chorddiag(abs(adj3), showTicks=FALSE,margin=150)
chorddiag(abs(adj3), showTicks=FALSE,margin=120)
chorddiag(abs(adj2), showTicks=FALSE)
colnames(adj2) <- sympstext[match(colnames(adj2), symps)]
rownames(adj2) <- sympstext[match(rownames(adj2), symps)]
data(probbase3)
group <- probbase3[match(colnames(adj2), probbase3[, 2]), 1]
group <- trunc(as.numeric(group)/100)
chorddiag(abs(adj2), showTicks=FALSE)
chorddiag(abs(adj2), showTicks=FALSE, margin = 120)
chorddiag(abs(adj2), showTicks=FALSE, margin = 220)
chorddiag(abs(adj2), showTicks=FALSE, margin = 420)
chorddiag(abs(adj2), showTicks=FALSE, margin = 220, categorynameFontsize = 15)
chorddiag(abs(adj2), showTicks=FALSE, margin = 220, categorynameFontsize = 1)
chorddiag(abs(adj2), showTicks=FALSE, margin = 220, groupnameFontsize = 1)
chorddiag(abs(adj2), showTicks=FALSE, margin = 220, groupnameFontsize = 10)
chorddiag(abs(adj2), showTicks=FALSE, margin = 230, groupnameFontsize = 10)
chorddiag(abs(adj2), showTicks=FALSE, margin = 250, groupnameFontsize = 10)
